#!/usr/bin/env python
import argparse, argcomplete
import sys
from mist.cmd.sync import sync
from mist.cmd.ansible import ansible
from mist.cmd.login import user_info
from mist.cmd.backends import backend_action
from mist.cmd.providers import provider_action
from mist.cmd.keys import key_action


def main():

    if len(sys.argv) == 1:
        print "Mist.io Service"
        sys.exit(0)

    parser = argparse.ArgumentParser()
    parser.add_argument("action", help="Available actions", type=str,
                        choices=["sync", "user", "list", "ls", "add", "delete", "remove", "rm", "del", "rename",
                                 "create", "add", "show", "describe", "display" "ansible"], default="list")
    parser.add_argument("target", help="Backends, Keys, Machines", type=str, default="backend",
                        choices=["backend", "backends", "machine", "machines", "key", "keys", "info", "providers",
                                 "supported_providers", "images", "locations", "sizes"])

    parser.add_argument("vars", nargs="*")
    parser.add_argument("-n", "--name", help="Name for whenever you need to provide one", required=False, type=str)
    parser.add_argument("-p", "--provider", help="Provider to use", required=False, type=str)
    parser.add_argument("-k", "--key", help="Username or apikey for backend", required=False, type=str)
    parser.add_argument("-s", "--secret", help="Password or apisecret for backend", required=False, type=str)
    parser.add_argument("-i", "--id", help="Id of backend, machine or key", required=False, type=str)
    parser.add_argument("-a", "--auto", help="Auto for auto-generation", required=False, action="store_true")
    parser.add_argument("--new_name", help="New name for renaming stuff", required=False, type=str)

    args = parser.parse_args()
    if args.action == "sync":
        sync(sys.argv[-1])
    elif args.action == "ansible":
        ansible(args.vars, args.name)
    elif args.action == "user" and args.target == "info":
        user_info()
    elif args.target in ["providers", "supported_providers"]:
        provider_action(args)
    elif args.target in ["backends", "backend"]:
        backend_action(args)
    elif args.target in ["keys", "key"]:
        key_action(args)
    else:
        print "Functionality not yet implemented"
        sys.exit(0)

if __name__ == "__main__":
    main()
