#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import sys
import argparse
import argcomplete

from mistcommand.helpers.sync import sync
from mistcommand.helpers.ansible import ansible
from mistcommand.helpers.login import user_info
from mistcommand.helpers.backends import backend_action
from mistcommand.helpers.providers import provider_action
from mistcommand.helpers.keys import key_action
from mistcommand.helpers.machines import machine_action
from mistcommand.helpers.images import image_action
from mistcommand.helpers.sizes import size_action
from mistcommand.helpers.locations import location_action


def main():

    main_parser = argparse.ArgumentParser(description="Mist.io command line tool")
    subparsers = main_parser.add_subparsers(help='action to perform',
                                            dest='action')

    # --------------ACTiONS----------------------------
    p_list = subparsers.add_parser(
        'list',
        description="List supported providers, images, sizes, locations, networks, backends, keys or machines",
    )

    p_display = subparsers.add_parser(
        'display',
        description="Display info about image, size, location, backend, key or machine"
    )
    p_add = subparsers.add_parser(
        'add',
        description="Add backend or key",
    )

    p_create = subparsers.add_parser(
        'create',
        description="Create machine"
    )

    p_delete = subparsers.add_parser(
        'delete',
        description="Delete backend, key or network"
    )

    p_rename = subparsers.add_parser(
        'rename',
        description="Rename backend or key"
    )

    p_start = subparsers.add_parser(
        'start',
        description="Start a machine"
    )

    p_stop = subparsers.add_parser(
        'stop',
        description="Stop a machine"
    )

    p_reboot = subparsers.add_parser(
        'reboot',
        description="Reboot a machine"
    )

    p_destroy = subparsers.add_parser(
        'destroy',
        description="Destroy a machine"
    )

    p_probe = subparsers.add_parser(
        'probe',
        description="Probe a machine"
    )

    p_enable_monitoring = subparsers.add_parser(
        'enable-monitoring',
        description="Enable monitoring on a machine"
    )

    p_disable_monitoring = subparsers.add_parser(
        'disable-monitoring',
        description="Disable monitoring on a machine"
    )

    p_get_stats = subparsers.add_parser(
        'get-stats',
        description="Get stats from a monitored machine"
    )

    p_user = subparsers.add_parser(
        'user',
        description="User actions"
    )

    # ------------------LIST TARGETS-------------------
    subparsers = p_list.add_subparsers(
        dest='target',
        help='List info for this target, e.g. list machines'
    )

    p_list_supported_providers = subparsers.add_parser(
        'supported-providers',
        description="List all supported providers"
    )

    p_list_backends = subparsers.add_parser(
        'backends',
        description="List all backends that are added to mist.io"
    )

    p_list_locations = subparsers.add_parser(
        'locations',
        description="List locations for the given backend"
    )

    p_list_images = subparsers.add_parser(
        'images',
        description="List available OS Images for the given backend"
    )
    p_list_images.add_argument(
        '--search', required=False,
        help="Search for OS Images that contain this."
    )

    p_list_sizes = subparsers.add_parser(
        'sizes',
        description="List available machine sizes for the given backend"
    )

    # ----------------DISPLAY TARGETS------------------
    subparsers = p_display.add_subparsers(
        dest='target',
        help='List info for this target, e.g. display backend --backend_name MyBackend'
    )

    p_display_backend = subparsers.add_parser(
        'backend',
        help="Display info for this backend"
    )

    # ----------------ADD TARGETS----------------------
    subparsers = p_add.add_subparsers(
        dest='target',
        help='Add a backend or key'
    )

    p_add_backend = subparsers.add_parser(
        'backend',
        help="Add a new backend"
    )

    provider_choices = [
        'bare_metal',
        'ec2_ap_northeast',
        'ec2_ap_southeast',
        'ec2_ap_southeast_2',
        'ec2_eu_west',
        'ec2_sa_east',
        'ec2_us_east',
        'ec2_us_west',
        'ec2_us_west_oregon',
        'gce',
        'nephoscale',
        'digitalocean',
        'linode',
        'openstack',
        'rackspace:dfw',
        'rackspace:ord',
        'rackspace:iad',
        'rackspace:lon',
        'rackspace:syd',
        'rackspace:hkg',
        'rackspace_first_gen:us',
        'rackspace_first_gen:uk',
        'softlayer',
        'hpcloud:region-a.geo-1',
        'hpcloud:region-b.geo-1',
        'docker'
    ]
    p_add_backend.add_argument(
        '--provider', required=True, choices=provider_choices,
        help="The provider id for the new backend, e.g. ec2_ap_northeast. You can"
             " list supported-providers to see all available provider ids"
    )

    p_add_backend.add_argument(
        '--name', required=True,
        help="Name for the new backend"
    )

    ec2_group = p_add_backend.add_argument_group('EC2')
    ec2_group.add_argument(
        '--ec2-api-key',
        help="The ec2 API key"
    )
    ec2_group.add_argument(
        '--ec2-api-secret',
        help="The ec2 API secret"
    )

    rackspace_group = p_add_backend.add_argument_group('Rackspace')
    rackspace_group.add_argument(
        '--rackspace-username',
        help="Username for Rackspace"
    )
    rackspace_group.add_argument(
        '--rackspace-api-key',
        help="API Key for Rackspace"
    )

    nephoscale_group = p_add_backend.add_argument_group('NephoScale')
    nephoscale_group.add_argument(
        '--nepho-username',
        help="Username for NephoScale"
    )
    nephoscale_group.add_argument(
        '--nepho-password',
        help="Password for nephoscale"
    )

    digital_group = p_add_backend.add_argument_group('DigitalOcean')
    digital_group.add_argument(
        '--digi-token',
        help="Token for the DigitalOcean backend"
    )

    linode_group = p_add_backend.add_argument_group("Linode")
    linode_group.add_argument(
        '--linode-api-key',
        help="API Key for the Linode backend"
    )

    openstack_group = p_add_backend.add_argument_group("Openstack")
    openstack_group.add_argument(
        '--openstack-username',
        help="Username for the Openstack backend"
    )
    openstack_group.add_argument(
        '--openstack-password',
        help="Password for the Openstack backend"
    )
    openstack_group.add_argument(
        '--openstack-auth-url',
        help="Auth url, e.g. http://10.0.0.2:5000"
    )
    openstack_group.add_argument(
        '--openstack-tenant',
        help="Tenant name"
    )
    openstack_group.add_argument(
        '--openstack-region',
        help="OPTIONAL. Normally you do not have to explicitly set a region"
    )

    softlayer_group = p_add_backend.add_argument_group("SoftLayer")
    softlayer_group.add_argument(
        '--softlayer-username',
        help="Username for the softlayer backend"
    )
    softlayer_group.add_argument(
        '--softlayer-api-key',
        help="API Key for the SoftLayer backend"
    )

    hp_group = p_add_backend.add_argument_group("HP")
    hp_group.add_argument(
        '--hp-username',
        help="Username for the HP backend"
    )
    hp_group.add_argument(
        '--hp-password',
        help="Passord for the HP backend"
    )
    hp_group.add_argument(
        '--hp-tenant',
        help="Tenant name for the HP backend"
    )

    docker_group = p_add_backend.add_argument_group("Docker")
    docker_group.add_argument(
        '--docker-host',
        help="Ip of the Docker host"
    )
    docker_group.add_argument(
        '--docker-port', default="4243",
        help="Port for the Docker API. By default 4243."
    )
    docker_group.add_argument(
        '--docker-auth-user',
        help="OPTIONAL. In case you have a basic auth set up."
    )
    docker_group.add_argument(
        '--docker-auth-password',
        help="OPTIONAL. In case you have a basic auth set up"
    )

    bare_group = p_add_backend.add_argument_group("Bare Metal Server")
    bare_group.add_argument(
        '--bare-hostname',
        help="Hostname of the machine"
    )
    bare_group.add_argument(
        '--bare-user', default="root",
        help="By default root"
    )
    bare_group.add_argument(
        '--bare-port', default="22",
        help="Port of the ssh-server. By default 22"
    )
    bare_group.add_argument(
        '--bare-ssh-key-id',
        help="The id of the ssh key that is associated with the machine"
    )

    # ----------------RENAME TARGETS-------------------
    subparsers = p_rename.add_subparsers(
        dest='target',
        help="Rename backend or key"
    )

    p_rename_backend = subparsers.add_parser(
        'backend',
        description="Rename backend"
    )

    p_rename_backend.add_argument(
        '-n', '--new_name', required=True,
        help="New name"
    )

    # ----------------DELETE TARGETS-------------------
    subparsers = p_delete.add_subparsers(
        dest='target',
        description="Delele backend, key or network"
    )

    p_delete_backend = subparsers.add_parser(
        'backend',
        help="Delete this backend"
    )

    # ----------------USER TARGETS---------------------
    subparsers = p_user.add_subparsers(
        dest='target',
        help='List info and take actions regarding the user'
    )

    p_user_info = subparsers.add_parser(
        'info',
        help='Get info about the user'
    )

    #---------------BACKEND OPTIONS---------------------
    for parser in [p_rename_backend, p_delete_backend, p_display_backend, p_list_locations,
                   p_list_images, p_list_sizes]:
        group = parser.add_mutually_exclusive_group(required=True)
        group.add_argument(
            '--backend',
            help="This can be either a backend's name or id"
        )
        group.add_argument(
            '--backend_id',
            help="Specify a backend's id"
        )
        group.add_argument(
            '--backend_name',
            help="Sepcify a backend's name"
        )

    argcomplete.autocomplete(main_parser)
    args = main_parser.parse_args()

    if args.action == 'user' and args.target == 'info':
        user_info()
    elif args.target == 'supported-providers':
        provider_action(args)
    elif args.target in ['backends', 'backend']:
        backend_action(args)
    elif args.target == 'locations':
        location_action(args)
    elif args.target == 'images':
        image_action(args)
    elif args.target == 'sizes':
        size_action(args)


    # if len(sys.argv) == 1:
    #     print "Mist.io Service"
    #     sys.exit(0)
    #
    # parser = argparse.ArgumentParser()
    # parser.add_argument("action", help="Available actions", type=str,
    #                     choices=["sync", "user", "list", "ls", "add", "delete", "remove", "rm", "del", "rename",
    #                              "create", "add", "show", "describe", "display", "ansible", "reboot", "start", "stop",
    #                              "destroy", "probe", "enable-monitoring", "get-stats", "enable-monitoring",
    #                              "disable-monitoring"], default="list")
    # parser.add_argument("target", help="Backends, Keys, Machines", type=str, default="backend",
    #                     choices=["backend", "backends", "machine", "machines", "key", "keys", "info", "providers",
    #                              "supported_providers", "images", "locations", "sizes", "dbyaml", "plugins", "plugin"])
    #
    # parser.add_argument("vars", nargs="*")
    # parser.add_argument("--dbyaml", help="Used with mist sync. Path of dbyaml file", required=False, type=str)
    # parser.add_argument("-n", "--name", help="Name for whenever you need to provide one", required=False, type=str)
    # parser.add_argument("-p", "--provider", help="Provider to use", required=False, type=str)
    # parser.add_argument("-k", "--key", help="Username or apikey for backend", required=False, type=str)
    # parser.add_argument("-s", "--secret", help="Password or apisecret for backend", required=False, type=str)
    # parser.add_argument("-i", "--id", help="Id of backend, machine or key", required=False, type=str)
    # parser.add_argument("-a", "--auto", help="Auto for auto-generation", required=False, action="store_true")
    # parser.add_argument("--new_name", help="New name for renaming stuff", required=False, type=str)
    # parser.add_argument("-b", "--backend", help="Backend name or id to be used with machines", required=False,
    #                     type=str)
    # parser.add_argument("--search", help="When searching specifically (e.g. images)", required=False, type=str)
    # parser.add_argument("--image", help="Image id to be used with machine creation", required=False, type=str)
    # parser.add_argument("--size", help="Size id for machine creation", required=False, type=str)
    # parser.add_argument("--location", help="Location id for machine creation", required=False, type=str)
    # parser.add_argument("--plugin", help="Plugin Id to be added", required=False, type=str)
    # parser.add_argument("--custom_plugin", help="Used if adding custom plugin", required=False, type=str)
    #
    # args = parser.parse_args()
    # if args.action == "sync":
    #     sync(sys.argv[-1])
    # elif args.action == "ansible":
    #     ansible(args.vars, args.name)
    # elif args.action == "user" and args.target == "info":
    #     user_info()
    # elif args.target in ["providers", "supported_providers"]:
    #     provider_action(args)
    # elif args.target in ["backends", "backend"]:
    #     backend_action(args)
    # elif args.target in ["keys", "key"]:
    #     key_action(args)
    # elif args.target in ["machines", "machine", "plugins", "plugin"]:
    #     machine_action(args)
    # elif args.target in ["images", "image"]:
    #     image_action(args)
    # elif args.target in ["locations", "location"]:
    #     location_action(args)
    # elif args.target in ["sizes", "size"]:
    #     size_action(args)
    # else:
    #     print "Functionality not yet implemented"
    #     sys.exit(0)

if __name__ == "__main__":
    main()
